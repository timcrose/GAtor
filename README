****************************************
        GAtor code README
****************************************
            .-._   _ _ _ _ _ _ _ _
 .-''-.__.-'00  '-' ' ' ' ' ' ' ' '-.
'.___ '    .   .--_'-' '-' '-' _'-' '._
 V: V 'vv-'   '_   '.       .'  _..' '.'.
   '=.____.=_.--'   :_.__.__:_   '.   : :
           (((____.-'        '-.  /   : :
                             (((-'\ .' /
                           _____..'  .'
                          '-._____.-'

Welcome to the GAtor cascade genetic algorithm for molecular crystal structure prediction. The code consists of three main folders Res, Run_calcs, and src which are detailed below::

1) Res- Contains species defaults for FHI-aims (e.g. light and tight basis sets for the different elements). You do not need to modify this folder and eventually we can move it elsewhere or combine it with another folder.

2) Run_calcs- This is the folder which it is most convenient to run your calculations.  Theoretically, one can do this from any working directory as long as the required files and folders are contained within the working directory (as well as correct file paths). The required folders and files are given below:

	i) ui.conf- This file is ideally the only file an unexperienced user has to modify to run the GA.  It allows the user to swap out specific modules for relaxation, crossover, mutation, selection, etc.  For example, one may want to test out two different mutation modules and keep the rest of the code the same.  This file also contains specific parameters and run settings for each specific module. For example, if one wants to change the allowed angles a unit cell can have one would change angle_low_bound and angle_high_bound in the comparison sectionwithout having to modify source code. NOTE: In order to run the code the user has to change the paths [TINKER]/path_to_tinker_executable for force field calculations or [FHI-aims]/path_to_aims_executable for FHI-aims.
	ii) control (folder)- This folder contains the control.in files for different levels of relaxation. For FHI-aims an example light and tight control.in are provided. For TINKER with the glycine parameter files the control file is called geometry_amber.key and links to the TINKER amber parameters as well as provides information on the charge of the atoms. NOTE: As of now the user has to change the path at the top of 'geometry_amber.key' for tinker calculations to the location of the amber parameters on one's own laptop or cluster. This can be changed in the future for more automation. To use a specific control file located within the control folder one has to change the ui.conf [control] settings to contain the name of the desired file.

	iii) user_initial_pools (folder)- This folder contains the user-created initial pools read in by the initial pool relaxation module. They are in FHI-aims format. This folder doesn't have to be in run_calcs but is for convenience. NOTE: One has to change the path in ui.conf [initial_pool]/user_structures_dir to the location of the desired executable in one's own laptop or cluster for the program to run.

	iv) reset.py and run_master.py- These two scripts aren't required but are the easiest way to reset and run the master program located in src/core/master.py from the current working directory. NOTE: The user has to change the paths appropriately at the top of each of these scripts.  It is good to always run reset.py before run_master.py for new runs or strange errors may occur. NOTE: To run the whole GA one simply has to run the scripts (i.e ./run_master.py).

	v) tmp (folder created at runtime and erased by reset.py for new runs)- This contains a folder of the latest structure relaxing before it is wiped away post relaxation. This is a random hexidecimal [eg dh7hd9920] and is where local relaxations are performed so at runtime it contains, eg, control.in geometry.in and exe.sh for an FHI-aims relaxation. In tmp is a file called energy_hierachy0.dat- this file is written to everytime a new structure is added to the collection. It shows the energy ranking of the structures in the collection as well as various details about the structure.

	vi) strucures (folder created at runtime and erased by reset.py for new runs)- This folder contains the stoichometry of the crystal (need to delete this later this was used when there were multiple stoics) and within the stoichometry is the folder -1 (which you can optionally write to in initial_pool/read_relax_user_structures and represents the relaxed initial pool with NO crossovers). The more important folder is 0 which is the common pool for the force field (which includes the initial pool AND all children/crossovers). By default this folder is written to every time a new structure is added. Within the level '0' is the hexidecimal folder of the structure in the collection which includes it's geometry.in as well as a JSON file which contains specific properties added to the strucure (eg energy, unit cell volume, etc).

3) src - contains the source code for GAtor.  This is in its own folder to separate it from the folders which one is running the calculations. It contains folders for all the major modules in the code.  If one was writing a new mutation module one would save it in src/mutation then change the ui.conf in run_calcs appropriately. Thesource is split into modules for easy modification to a certain part of the code within changing the entire thing. The 'core' folder contains the master.py script which essentially just runs run_Ga.py. NOTE: run_GA.py is the most important script if one wants to understand the workflow of the entire algorithm as well as if one wants to follow the code as it prints out certain things. Another very important module is structures/structure.py.Everytime a new geometry is created or modified (e.g. crossover) one creates a structure class object via new_geometry= Structure(). Then one can use any of the helper functions located in structure.py. structure.py also contains info on how to add a property to a structure (eg. lattice vectors, unit cell volume, anything you want to attach to the object). For more information on these modules see the quasi-manual. For now I will list the basic inputs and outputs of each module as they appear in the general workflow:

	[initial_pool]- This module fills the initial pool of the GA. The standard one for molecular crystals is 'read_relax_user_strucures' which reads in the initial pool structures in run_calcs/user_initial_pools and relaxes them, compares them to each other and basic criterion (like angle range) by calling src/comparison, and then adds them to level '0' (the force field common pool) if they pass comparison. The inputs are the replica random index created in run_ga as well as the desired stoichemetry (doesn't matter for molecular crystals- need to change this later). It outputs the total number of structures added to collection 0.

	[selection] - Decides which structures from the initial pool will be chosen for crossover. This is based on their energy fitness.  Higher energy structures are more probabilistic to be mated with other high energy structures. Returns two structures to be given to crossover..

	[crossover]- Crosses two structures together by combining their lattice vectors and chosing one or two molecules from each cell. Outputs a NEW single structure in the Structure() format.

	[mutation]- Recieves the structure created by crossover and decides which mutation to impart. If a single parent was chosen in crossover then it is forced to be mutated.

	[relaxation]- Relaxes the mutated structure with the same level as the intial pool. 

	[comparison]- The relaxed structure is compared to the existing structures in the collection via a cascade of requirements. This needs to be edited but the idea is to reject structures as fast as possible without having to compare fine differences between ALL the structures in the collection unless absolutely necessary.  This module needs to be as efficient as possible since comparing 1 structure to 25000 can take A LOT of time.

If a structure passes all of these tests it is added to the collection and then we start up with a new selection of two candidate structures.
