***************************************************
This folder provides the inputs according to the
tutorial of the user manual. See user manual
for full instructions and explanations.
***************************************************
INPUTS

One required input is an initial pool, an example
one is given by ./initial_pool and contains the input structures
in JSON format.  They include geometry and energy information.

The other required input is a configuration file, eg. ui.conf, which controls 
which GA modules are being used at runtime, a path to the initial pool, 
details for the parallelization, and additional parameters which can be 
modified during the GA run.

One also needs a build of FHI-aims, the path to which can be specified in ui.conf
under 

If one just wants to create structures without
relaxations or energy evaluations for tutorial purposes 
uncomment [run_settings]/skip_energy_evaluations = TRUE in ui.conf.
and
The ui.conf given is intended to be basic for tutorial purposes.
See user manual for a full list of available keywords.

***********************************************
RUNNING THE CODE

To run the master code one can execute:

>> python ../src/GAtor_master.py ui.conf

which calls the master script ../src/GAtor_master.py and takes ui.conf 
as an input.

On a laptop, GAtor uses subprocessing to run each parallel replica, the 
necessary settings in ui.conf are given by:

parallelization_method = subprocess
number_of_replicas = 1
processes_per_replica = 1

This runs 1 GA replica on 1 process. Increasing processes_per_replica speeds up the structure
generation process.

For detailed examples of running GAtor on specific clusters see user manual and submit_to_cluster.sh

****************************************************
SAMPLE OUTPUTS

Std outputs and error are found in:

GAtor.out - details the structure generation process
GAtor.log - details the parallelization process
GAtor.err - error file

Newly generated structures, as well as the initial pool, are stored in ./structures/structures/<stoic>/0
Where <stoic> is a string of the element types and numbers in the crystal.
Each structure is labelled by a unique random index.

A list of all structures by index, and their energy values and relevant parameters is output to ./energy_hierarchy.dat
If energy evaluations are not being performed then the energy value is simply set to 0.00

*******************************
Ending/Killing GAtor on a laptop

To run GAtor until a certain amount of structures has been added,
modify

  end_GA_structures_added 

in ui.conf and the GA will stop automatically when this number has been reached. 

To kill GAtor mid run:
    One can just run ./reset_calc.sh

*******************************
Additional notes:

GAtor checks that each new structure is not a dupicate and/or is not physical.  This is why structure generation can 'fail' 
and/or take a little time. This information will be output to GAtor.out.


