***************************************************
This example calculation folder generates new structures 
but does not perform energy evalutations with an
external DFT code

************************************************
INPUTS

One required input is an intial pool, an example
one is given by ./initial_pool and contains the input structures
in JSON format.  They include geometric parameters and energy information.

The other required input is a configuration file, eg. ui.conf, which controls 
which GA modules are being used, a path to the initial pool, details for the parallelization, 
and additional parameters which can be modified during the GA run.

The one given, TCS3.conf is intended to be very basic and skips the DFT energy evaluations

***********************************************
RUNNING THE CODE

To run the master code one can execute:

>> python ../src/GAtor_master.py ui.conf

which calls the master script ../src/GAtor_master.py and takes TCS3.conf 
as an input.

On a laptop, GAtor uses subprocessing to run each parallel replica, the necessary settings 
in TCS3.conf are given by:

parallelization_method = subprocess
number_of_replicas = 1
processes_per_replica = 1

This runs 1 GA replica on 1 process. Increasing processes_per_replica speeds up the structure
generation process. For a laptop, one can run several GA replicas in parallel by running ./run.sh
several times.  The number_of_replicas setting is intended for HPC environments and will only work 
with number_of_replicas = 1 on a laptop.

For an example of running GAtor on a cluster see submit_to_cluster.sh

****************************************************
OUTPUTS

Std outputs and error are found in:

GAtor.out - details the structure generation process
GAtor.log - details the parallelization process
GAtor.err - error file

Newly generated structures, as well as the initial pool, are stored in ./structures/structures/C\:32_N\:16_S\:12/0
Each structure has a unique random index.

A list of all structures by index, and their energy values and relevant parameters is output to ./energy_hierarchy.dat
If energy evaluations are not being performed then the energy value is simply set to 0.00

*******************************
Ending/Killing GAtor on a laptop

To run GAtor until a certain amount of structures has been added,
modify

  end_GA_structures_added 

in TCS3.conf and the GA will stop automatically when this number has been reached. 

To kill GAtor mid run:
    Either kill the process ID or remove /tmp/. 

    If a GA run is killed but tmp is not removed, it can be resumed by running ./run.sh again, and all previous information is
retained

*******************************
Additional notes:

GAtor checks that each new structure is not a dupicate and/or is not physical.  This is why structure generation can 'fail' 
and/or take a little time. This information will be output to GAtor.out.


